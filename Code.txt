You're currently on **Node.js v12.22.9**, but your `npm` is still broken because:

* It's trying to use `/opt/nodejs/bin/npm`, which **belongs to Node 22**, not Node 12.
* Since you downgraded Node by **just changing the tarball**, `npm` from v12 is not yet installed.

Letâ€™s **fix npm for Node 12** manually now.

---

## âœ… STEP-BY-STEP FIX for `npm` with Node 12

### 1. Clean broken reference (optional)

Just to remove any confusion from leftover symlinks:

```bash
sudo rm -f /opt/nodejs/bin/npm
sudo rm -f /opt/nodejs/bin/npx
```

---

### 2. Install `npm` for Node 12 manually

You're using the Node 12 binary, so it didnâ€™t come with `npm`. Letâ€™s add it manually:

```bash
cd ~
curl -L https://github.com/npm/cli/archive/refs/tags/v6.14.18.tar.gz -o npm-v6.14.18.tar.gz
tar -xzf npm-v6.14.18.tar.gz
cd cli-6.14.18
make install
```

If `make` fails (some distros donâ€™t have it), then install via Node:

```bash
node -v  # ensure v12.x
curl -L https://www.npmjs.com/install.sh | sh
```

---

### 3. Verify it worked:

```bash
npm -v  # Should show 6.14.18 or similar
```

Now you're ready to:

```bash
cd /opt/erapp/frontend
npm install
npm run build
```

---

## âš  Alternative: Use Node 12 with NPM included

If the above gives you trouble, just download **Node 12 full tarball that includes npm**:

```bash
cd ~
wget https://nodejs.org/dist/v12.22.12/node-v12.22.12-linux-x64.tar.xz
tar -xf node-v12.22.12-linux-x64.tar.xz
sudo mv node-v12.22.12-linux-x64 /opt/node12
echo 'export PATH=/opt/node12/bin:$PATH' >> ~/.bashrc
source ~/.bashrc

node -v  # v12.22.12
npm -v   # should work now
```

---

ðŸ§  Your Goal: Just get Node 12 + NPM working â†’ build â†’ revert back to Node 22.

Once `npm -v` works, you're good to build the frontend.

Want a single command line copy-paste version of this whole fix?
